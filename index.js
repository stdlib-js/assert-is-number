// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,t;e=this,t=function(e){"use strict";var t="function"==typeof Object.defineProperty?Object.defineProperty:null,r=Object.defineProperty,o=Object.prototype,n=o.toString,i=o.__defineGetter__,l=o.__defineSetter__,u=o.__lookupGetter__,c=o.__lookupSetter__,a=function(){try{return t({},"x",{}),!0}catch(e){return!1}}()?r:function(e,t,r){var a,f,p,y;if("object"!=typeof e||null===e||"[object Array]"===n.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof r||null===r||"[object Array]"===n.call(r))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+r+"`.");if((f="value"in r)&&(u.call(e,t)||c.call(e,t)?(a=e.__proto__,e.__proto__=o,delete e[t],e[t]=r.value,e.__proto__=a):e[t]=r.value),p="get"in r,y="set"in r,f&&(p||y))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return p&&i&&i.call(e,t,r.get),y&&l&&l.call(e,t,r.set),e};function f(e,t,r){a(e,t,{configurable:!1,enumerable:!1,writable:!1,value:r})}function p(e){return"number"==typeof e}var y="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");function b(){return y&&"symbol"==typeof Symbol.toStringTag}var s=Object.prototype.toString,_=Object.prototype.hasOwnProperty,d="function"==typeof Symbol?Symbol.toStringTag:"",m=b()?function(e){var t,r,o,n,i;if(null==e)return s.call(e);r=e[d],i=d,t=null!=(n=e)&&_.call(n,i);try{e[d]=void 0}catch(t){return s.call(e)}return o=s.call(e),t?e[d]=r:delete e[d],o}:function(e){return s.call(e)},j=Number,v=j.prototype.toString,g=b();function S(e){return"object"==typeof e&&(e instanceof j||(g?function(e){try{return v.call(e),!0}catch(e){return!1}}(e):"[object Number]"===m(e)))}function h(e){return p(e)||S(e)}f(h,"isPrimitive",p),f(h,"isObject",S),e.default=h,e.isObject=S,e.isPrimitive=p,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).isNumber={});
//# sourceMappingURL=index.js.map
